@model HealthRecords.Models.Appointment

@{
    ViewBag.Title = "Create";
}

<style type="text/css">
    import "bourbon";

    body {
        background: #eee !important;
    }

    .form-group input[type="checkbox"] {
        display: none;
    }

        .form-group input[type="checkbox"] + .btn-group > label span {
            width: 20px;
        }

            .form-group input[type="checkbox"] + .btn-group > label span:first-child {
                display: none;
            }

            .form-group input[type="checkbox"] + .btn-group > label span:last-child {
                display: inline-block;
            }

        .form-group input[type="checkbox"]:checked + .btn-group > label span:first-child {
            display: inline-block;
        }

        .form-group input[type="checkbox"]:checked + .btn-group > label span:last-child {
            display: none;
        }

    .wrapper {
        margin-top: 30px;
        margin-bottom: 80px;
        height: 100%;
        overflow: hidden
    }

    .form-signin {
        max-width: 380px;
        padding: 15px 35px 45px;
        margin: 0 auto;
        background-color: #fff;
        border: 1px solid rgba(0,0,0,0.1);
    }

    .form-signin-heading, .checkbox {
        margin-bottom: 30px;
    }

    .checkbox {
        font-weight: normal;
    }

    .form-control {
        position: relative;
        font-size: 16px;
        height: auto;
        padding: 10px;
        include box-sizing(border-box);
    }

    &:focus {
        z-index: 2;
    }



    input[type="text"] {
        margin-bottom: -1px;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
    }

    input[type="password"] {
        margin-bottom: 20px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
    }

        input[type="text"]:focus, input[type="password"]:focus {
            box-shadow: 0 0 5px rgba(243, 16, 171, 0.8);
            border: 1px solid rgba(243, 16, 171, 0.8);
        }
</style>
<script type="text/javascript">

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;
        return true;
    }


    function isNumericKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return true;
        return false;
    }
</script>
<script>

    $('#datepicker').datepicker({
        uiLibrary: 'bootstrap'
    });
</script>


<div class="wrapper">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-md-offset-4 col-md-5">
                <form>
                    <div class="row">
                        <div class="col-md-offset-2 col-md-offset-0">
                            <h2 style="color: rgba(243, 16, 171, 0.8); font-weight:800; padding: 10px; font-size: 35px; margin: 10px;">
                                @Html.ActionLink(" ", "Index", null, new { @class = "glyphicon glyphicon-arrow-left", @style = "color: rgba(243, 16, 171, 0.8); font-size: 25px; text-decoration: none;" })
                                Create Apointment
                            </h2>
                        </div>
                    </div>
                    <hr />
                    @Html.ValidationSummary("", new { @class = "text-danger" })

                    <div class="row">
                        <div class="col-md-offset-2 col-md-8">
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First name", type = "text", name = "FirstName", required = "", autofocus = "" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            <br />

                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last name", type = "text", name = "LastName", required = "", autofocus = "" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            <br />
                            @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", id = "txtNumber", placeholder = "Age 0-99", onkeypress = "return isNumberKey(event)", type = "text", name = "txtNumber", maxlength = "2" } })
                            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                            <br />
                            @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", placeholder = "Date", type = "Date", name = "Date", required = "", autofocus = "" } })
                            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            <br />
                            @Html.EditorFor(model => model.Condition, new { htmlAttributes = new { @class = "form-control", placeholder = "Condition", type = "text", name = "Condition", required = "", autofocus = "" } })
                            @Html.ValidationMessageFor(model => model.Condition, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <br />
                    <div class="row">
                        <div class="col-md-offset-2 col-md-8">
                            <input type="submit" value="Create" class="btn btn-lg btn-primary btn-block" style="background-color: rgba(243, 16, 171, 0.8); border-color: rgba(243, 16, 171, 0.8)" />
                        </div>
                    </div>
                </form>
            </div>
        </div>

    }
    
</div>